import os
import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from fastapi import FastAPI, Request
from datetime import datetime
import random
from openai import AsyncOpenAI

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "196614680"))
CHAT_ID = os.getenv("CHAT_ID")
THREAD_ID = os.getenv("THREAD_ID")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

for var_name, value in [
    ("BOT_TOKEN", BOT_TOKEN),
    ("OPENAI_API_KEY", OPENAI_API_KEY),
    ("CHAT_ID", CHAT_ID),
    ("BITRIX_WEBHOOK_URL", BITRIX_WEBHOOK_URL)
]:
    if not value:
        logger.error(f"{var_name} –Ω–µ –∑–∞–¥–∞–Ω!")
        raise RuntimeError(f"{var_name} –Ω–µ –∑–∞–¥–∞–Ω!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

def create_app():
    app = FastAPI()

    @app.post("/bitrix-webhook")
    async def bitrix_webhook(request: Request):
        try:
            raw_body = await request.body()
            logger.info(f"RAW BODY: {raw_body}")
            data = await request.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {"ok": False, "error": f"Invalid JSON: {e}"}
        task_id = str(data.get("id") or data.get("task_id") or data.get("task", {}).get("id"))
        type_ = data.get("type") or "new_task"
        if not task_id or "{{" in task_id:
            logger.warning("No valid task id")
            return {"ok": False, "error": "No valid task id"}
        try:
            task = get_task_data(task_id)
            if not task:
                logger.warning(f"Task not found: {task_id}")
                return {"ok": False, "error": "Task not found"}
            message = build_message(type_, task)
            send_kwargs = dict(
                chat_id=int(CHAT_ID),
                text=message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            if THREAD_ID:
                send_kwargs["message_thread_id"] = int(THREAD_ID)
            asyncio.create_task(bot.send_message(**send_kwargs))
            return {"ok": True}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
            return {"ok": False, "error": str(e)}

    @app.get("/")
    async def root():
        return {"ok": True}

    @app.on_event("startup")
    async def on_startup():
        asyncio.create_task(dp.start_polling(bot))

    return app

# --- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_task_data(task_id):
    url = f"{BITRIX_WEBHOOK_URL}tasks.task.get?taskId={task_id}"
    try:
        resp = requests.get(url, timeout=10)
        data = resp.json()
        return data.get("result", {}).get("task")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ Bitrix24: {e}")
        return None

def build_message(type_, task):
    fio = (task.get("responsible", {}).get("name") or '').strip()
    creator = task.get("creator", {}).get("name", "")
    creator_id = task.get("creator", {}).get("id", "")
    tg_map = {
        '–ö—Ä–∏—Å—Ç–∏–Ω–∞ –ù–µ—Å—Ç–µ—Ä–æ–≤–∞': '@tinatinulya',
        '–ï–≤–≥–µ–Ω–∏—è –ú—É—Ä–∑–∏–Ω–∞': '@xquerel',
        '–ù–∏–ª –ú. –í–ú –ï–í–ì': '@nilfts',
        '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ë–µ–ª–æ–Ω–æ–≥–æ–≤–∞': '@ek_belonogova',
        '–û–ª–µ–≥ –°. –ê–†–¢ –†–í–ë –°–ü–ë –ì–†–ò–ë': '@olegstate'
    }
    personalized_phrases = {
        '–ö—Ä–∏—Å—Ç–∏–Ω–∞ –ù–µ—Å—Ç–µ—Ä–æ–≤–∞': [
            '–¥–µ—Ä–∂–∏, —Ç—ã –∂–µ —É –Ω–∞—Å –ª—é–±–∏—à—å –≤—Å—ë –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å üßê.',
            'KPI —Å–∞–º —Å–µ–±—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç. –ü—Ä–∏—Å—Ç—É–ø–∞–π.',
            '—Ç—É—Ç –Ω—É–∂–Ω–∞ —Ç–≤–æ—è —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å.',
            '–≤—Ö–æ–¥—è—â–∏–π —Ç–∞—Å–∫ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é –Ω–µ—Ä–µ—à–∞–µ–º–æ–≥–æ.',
            '—Ç–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —É–º –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å.'
        ],
        '–ï–≤–≥–µ–Ω–∏—è –ú—É—Ä–∑–∏–Ω–∞': [
            '–º–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. ‚ú®',
            '—Ç–µ–±–µ –ø–æ—Ä—É—á–µ–Ω–æ –Ω–µ—Å—Ç–∏ –∑–Ω–∞–º—è –º–∏–ª–æ—Ç—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.',
            '–º–∞–ª–µ–Ω—å–∫–∏–π –≥–∏–≥–∞–Ω—Ç –±–æ–ª—å—à–æ–≥–æ SMM, —Ç–≤–æ–π —á–∞—Å –Ω–∞—Å—Ç–∞–ª.',
            '–ø–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–∞—Å–∫. –£—Ä–æ–≤–µ–Ω—å –º–∏–ª–æ—Ç—ã –≤ —á–∞—Ç–µ –ø–æ–≤—ã—à–µ–Ω.'
        ],
        '–ù–∏–ª –ú. –í–ú –ï–í–ì': [
            '–º–∞—ç—Å—Ç—Ä–æ, –≤–∞—à —Ö–æ–ª—Å—Ç –≥–æ—Ç–æ–≤. –ñ–¥–µ–º —à–µ–¥–µ–≤—Ä. üé®',
            '—Ç—É—Ç –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥. –î—É–º–∞–π!',
            '–∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç —â–µ–ø–æ—Ç–∫–∏ –±–µ–∑—É–º–∏—è. –£ —Ç–µ–±—è –æ–Ω–∞ –µ—Å—Ç—å.',
            '–≤—Ä–µ–º—è –¥–ª—è –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞! –¢—ã —à—Ç—É—Ä–º—É–µ—à—å, –º—ã –∂–¥–µ–º.'
        ],
        '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ë–µ–ª–æ–Ω–æ–≥–æ–≤–∞': [
            'Figma –ø–ª–∞—á–µ—Ç, –∂–¥–µ—Ç —Å–≤–æ—é –∫–æ—Ä–æ–ª–µ–≤—É. üëë',
            '–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ. –í–ø—Ä–æ—á–µ–º, –∫–∞–∫ –æ–±—ã—á–Ω–æ. üíÖ',
            '–ø—Ä–æ–µ–∫—Ç –∂–¥–µ—Ç —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è. –ò —Å–≤–æ–µ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –≠—Ç–æ —Ç—ã.',
            '—Ç–≤–æ–∏ –º–∞–∫–µ—Ç—ã –∂–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!'
        ],
        '–û–ª–µ–≥ –°. –ê–†–¢ –†–í–ë –°–ü–ë –ì–†–ò–ë': [
            '–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä, –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–π–º–∞—Ç—å –≤–∞–π–±. ü§ô',
            '—Ç—É—Ç –¥–µ–ª—å—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–≤–æ–µ–≥–æ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è. üòé',
            '–Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ –∫–∞–π—Ñ—É. –¢—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫. üå¥'
        ]
    }
    generic_phrases = [
        '—É –≤–∞—Å —Ç—É—Ç –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∫–∞!',
        '–¥–ª—è —Ç–µ–±—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!',
        '—Ç–µ–±–µ –≤—ã–ø–∞–ª–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.',
        '–≤—Ä–µ–º—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å.'
    ]
    random_endings = [
        '‚òéÔ∏è –ï—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–µ—à—å ‚Äî –ø–æ–∑–≤–æ–Ω—é —Ç–≤–æ–µ–π –º–∞–º–µ! ü§´',
        'P.S. –ú–æ–π –∫–æ—Ç –±—É–¥–µ—Ç —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–≤–∞–ª–∏—à—å –¥–µ–¥–ª–∞–π–Ω. üêà',
        '–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –≤ —Å—Ä–æ–∫ –∑–∞–¥–∞—á—É ‚Äî –ø–µ—á–µ–Ω—å–∫–∞. üç™ –ú–æ–∂–µ—Ç –±—ã—Ç—å.',
        '–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π —Å–∏–ª–∞... –∏ –∫–æ—Ñ–µ–∏–Ω. ‚òï'
    ]
    tg_tag = tg_map.get(fio, fio)
    deadline = task.get("deadline")
    if deadline:
        try:
            deadline = datetime.fromisoformat(deadline.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
        except Exception:
            deadline = deadline
    else:
        deadline = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    desc = task.get("description") or '-'

    phrase_list = personalized_phrases.get(fio, generic_phrases)
    random_phrase = random.choice(phrase_list)
    final_ending = f"\n\n{random.choice(random_endings)}"

    opening_line = f"{tg_tag}, {random_phrase}"
    core_message = (
        f"üî¢ ID: {task.get('id')}\n"
        f"üßæ –ó–∞–¥–∞—á–∞: {task.get('title')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
        f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {fio}\n"
        f"üßë‚Äçüíº –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {creator}\n"
        f"üìÅ –ü—Ä–æ–µ–∫—Ç: {task.get('group', {}).get('name', '-')}\n"
        f"üìÖ –°—Ä–æ–∫: {deadline}"
    )
    message = (
        f"{opening_line}\n\n"
        f"{core_message}\n\n"
        f'<a href="https://nebar.bitrix24.ru/company/personal/user/{creator_id}/tasks/task/view/{task.get("id")}/">–°–°–´–õ–ö–ê –ù–ê –ó–ê–î–ê–ß–£</a>'
        f'{final_ending}'
    )
    return message

# --- Aiogram: ChatGPT-–æ—Ç–≤–µ—Ç—ã –≤ –ª–∏—á–∫—É ---
@dp.message()
async def handle_message(message: types.Message):
    if message.chat.type == "private":
        user_text = message.text.strip() if message.text else ""
        if not user_text:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
            return
        try:
            response = await openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
                    {"role": "user", "content": user_text}
                ],
                max_tokens=600,
                temperature=0.9,
            )
            answer = response.choices[0].message.content.strip()
            await message.reply(answer)
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")

# --- –≠–∫—Å–ø–æ—Ä—Ç FastAPI APP ---
app = create_app()
