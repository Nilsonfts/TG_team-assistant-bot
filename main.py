import os
import requests
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–¢–í–û–ô_TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "ID_–¢–í–û–ï–ì–û_–ß–ê–¢–ê")  # —á–∞—Ç –∫—É–¥–∞ —Å–ª–∞—Ç—å –∑–∞–¥–∞—á–∏
MY_TELEGRAM_ID = os.getenv("MY_TELEGRAM_ID", "–¢–í–û–ô_–õ–ò–ß–ù–´–ô_ID")      # —Ç–µ–±–µ –ª–∏—á–Ω–æ –¥–ª—è –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–æ–≤

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    try:
        resp = requests.post(url, data=data)
        return resp.ok
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
@app.api_route("/bitrix-webhook", methods=["GET", "POST"])
async def bitrix_webhook(request: Request):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    data = {}
    # JSON
    try:
        data = await request.json()
    except Exception:
        pass
    # form-data
    if not data:
        try:
            form = await request.form()
            data = dict(form)
        except Exception:
            pass
    # query
    if not data:
        data = dict(request.query_params)

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë —Å–µ–±–µ
    print("Bitrix webhook:", data)
    send_telegram_message(MY_TELEGRAM_ID, f"üì© Webhook –ø–æ–ª—É—á–µ–Ω:\n<code>{data}</code>")

    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –∑–∞–¥–∞—á (–º–æ–∂–µ—à—å –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –Ω—É–∂–Ω—ã–º –ø–æ–ª—è–º)
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏: id, type, title –∏ –¥—Ä.
    task_id = data.get("id") or data.get("ID") or "-"
    task_type = data.get("type") or data.get("TYPE") or "-"
    task_title = data.get("title") or data.get("TITLE") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    msg = f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ Bitrix24!\n"
    msg += f"ID: <b>{task_id}</b>\n"
    msg += f"–¢–∏–ø: <b>{task_type}</b>\n"
    msg += f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{task_title}</b>\n"
    msg += f"–î–∞–Ω–Ω—ã–µ: <code>{data}</code>"

    # –®–ª—ë–º –≤ —á–∞—Ç –∑–∞–¥–∞—á
    ok = send_telegram_message(TELEGRAM_CHAT_ID, msg)
    if not ok:
        send_telegram_message(MY_TELEGRAM_ID, "‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç!")

    return JSONResponse({"status": "ok"})

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
@app.get("/")
async def root():
    return {"message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –í–µ–±—Ö—É–∫ –¥–ª—è Bitrix24: /bitrix-webhook"}
