import os
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from fastapi import FastAPI, Request
import openai
import uvicorn
from datetime import datetime

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHAT_ID = os.getenv("CHAT_ID")
THREAD_ID = os.getenv("THREAD_ID")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL", "https://nebar.bitrix24.ru/rest/1856/5damz451340uegoc/")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω!")
if not CHAT_ID:
    raise RuntimeError("CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()
openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)

def is_private(message: types.Message):
    return message.chat.type == "private"

@dp.message()
async def handle_message(message: types.Message):
    if is_private(message):
        user_text = message.text.strip()
        if not user_text:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
            return
        try:
            resp = openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ChatGPT –≤ Telegram, –æ—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É."},
                    {"role": "user", "content": user_text}
                ],
                max_tokens=700,
                temperature=0.7,
            )
            answer = resp.choices[0].message.content
            await message.reply(answer)
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")

# --- –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –º–∞–ø–ø–∏–Ω–≥–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏) ---
tg_map = {
    '–ö—Ä–∏—Å—Ç–∏–Ω–∞ –ù–µ—Å—Ç–µ—Ä–æ–≤–∞': '@tinatinulya',
    '–ï–≤–≥–µ–Ω–∏—è –ú—É—Ä–∑–∏–Ω–∞': '@xquerel',
    '–ù–∏–ª –ú. –í–ú –ï–í–ì': '@nilfts',
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ë–µ–ª–æ–Ω–æ–≥–æ–≤–∞': '@ek_belonogova',
    '–û–ª–µ–≥ –°. –ê–†–¢ –†–í–ë –°–ü–ë –ì–†–ò–ë': '@olegstate'
}
personalized_phrases = {
    '–ö—Ä–∏—Å—Ç–∏–Ω–∞ –ù–µ—Å—Ç–µ—Ä–æ–≤–∞': ['–¥–µ—Ä–∂–∏, —Ç—ã –∂–µ —É –Ω–∞—Å –ª—é–±–∏—à—å –≤—Å—ë –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å üßê.', 'KPI —Å–∞–º —Å–µ–±—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç. –ü—Ä–∏—Å—Ç—É–ø–∞–π.'],
    '–ï–≤–≥–µ–Ω–∏—è –ú—É—Ä–∑–∏–Ω–∞': ['–º–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. ‚ú®'],
    '–ù–∏–ª –ú. –í–ú –ï–í–ì': ['–º–∞—ç—Å—Ç—Ä–æ, –≤–∞—à —Ö–æ–ª—Å—Ç –≥–æ—Ç–æ–≤. –ñ–¥–µ–º —à–µ–¥–µ–≤—Ä. üé®'],
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ë–µ–ª–æ–Ω–æ–≥–æ–≤–∞': ['Figma –ø–ª–∞—á–µ—Ç, –∂–¥–µ—Ç —Å–≤–æ—é –∫–æ—Ä–æ–ª–µ–≤—É. üëë'],
    '–û–ª–µ–≥ –°. –ê–†–¢ –†–í–ë –°–ü–ë –ì–†–ò–ë': ['–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä, –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–π–º–∞—Ç—å –≤–∞–π–±. ü§ô']
}
generic_phrases = ['—É –≤–∞—Å —Ç—É—Ç –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∫–∞!', '–¥–ª—è —Ç–µ–±—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!']

# ... –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è personalizedClosedPhrases –∏ –¥—Ä—É–≥–∏—Ö —Ñ—Ä–∞–∑

random_endings = [
    '‚òéÔ∏è –ï—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–µ—à—å ‚Äî –ø–æ–∑–≤–æ–Ω—é —Ç–≤–æ–µ–π –º–∞–º–µ! ü§´',
    'P.S. –ú–æ–π –∫–æ—Ç –±—É–¥–µ—Ç —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–≤–∞–ª–∏—à—å –¥–µ–¥–ª–∞–π–Ω. üêà'
]

def get_task_data(task_id):
    url = f"{BITRIX_WEBHOOK_URL}tasks.task.get?taskId={task_id}"
    resp = requests.get(url, timeout=10)
    data = resp.json()
    return data.get("result", {}).get("task")

def build_message(type_, task):
    fio = (task.get("responsible", {}).get("name") or '').strip()
    creator = task.get("creator", {}).get("name", "")
    creator_id = task.get("creator", {}).get("id", "")
    tg_tag = tg_map.get(fio, fio)
    deadline = task.get("deadline")
    if deadline:
        try:
            deadline = datetime.fromisoformat(deadline.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
        except Exception:
            pass
    else:
        deadline = "–Ω–µ —É–∫–∞–∑–∞–Ω"

    opening_line = ""
    core_message = ""
    final_ending = f"\n\n{random_endings[0]}"
    # –¢–æ–ª—å–∫–æ —Ç–∏–ø "new_task" —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–π reminder/closed –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    if type_ == 'new_task':
        phrase_list = personalized_phrases.get(fio, generic_phrases)
        random_phrase = phrase_list[0]  # random.choice –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å
        opening_line = f"{tg_tag}, {random_phrase}"
        core_message = (
            f"üî¢ ID: {task.get('id')}\n"
            f"üßæ –ó–∞–¥–∞—á–∞: {task.get('title')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description') or '-'}\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {fio}\n"
            f"üßë‚Äçüíº –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {creator}\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç: {task.get('group', {}).get('name', '-')}\n"
            f"üìÖ –°—Ä–æ–∫: {deadline}"
        )
    message = (
        f"{opening_line}\n\n"
        f"{core_message}\n\n"
        f'<a href="https://nebar.bitrix24.ru/company/personal/user/{creator_id}/tasks/task/view/{task.get("id")}/">–°–°–´–õ–ö–ê –ù–ê –ó–ê–î–ê–ß–£</a>'
        f'{final_ending}'
    )
    return message

@app.post("/bitrix-webhook")
async def bitrix_webhook(request: Request):
    data = await request.json()
    task_id = str(data.get("id") or data.get("task_id") or data.get("task", {}).get("id"))
    type_ = data.get("type") or "new_task"
    if not task_id or "{{" in task_id:
        return {"ok": False, "error": "No valid task id"}
    try:
        task = get_task_data(task_id)
        if not task:
            return {"ok": False, "error": "Task not found"}
        message = build_message(type_, task)
        send_kwargs = dict(
            chat_id=int(CHAT_ID),
            text=message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        if THREAD_ID:
            send_kwargs["message_thread_id"] = int(THREAD_ID)
        asyncio.create_task(bot.send_message(**send_kwargs))
        return {"ok": True}
    except Exception as e:
        return {"ok": False, "error": str(e)}

async def run_all():
    asyncio.create_task(dp.start_polling(bot))
    config = uvicorn.Config(app, host="0.0.0.0", port=8000)
    server = uvicorn.Server(config)
    await server.serve()

if __name__ == "__main__":
    asyncio.run(run_all())
