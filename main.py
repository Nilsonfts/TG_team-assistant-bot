import os
import asyncio
import logging
from typing import Optional, Dict, Any
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from fastapi import FastAPI, Request
from datetime import datetime
import random
from openai import AsyncOpenAI
from urllib.parse import parse_qs

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    format='%(asctime)s %(levelname)s %(name)s | %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("main")

# --- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "196614680"))
CHAT_ID = os.getenv("CHAT_ID")
THREAD_ID = os.getenv("THREAD_ID")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

for var_name, value in [
    ("BOT_TOKEN", BOT_TOKEN),
    ("OPENAI_API_KEY", OPENAI_API_KEY),
    ("CHAT_ID", CHAT_ID),
    ("BITRIX_WEBHOOK_URL", BITRIX_WEBHOOK_URL)
]:
    if not value:
        logger.error(f"{var_name} –Ω–µ –∑–∞–¥–∞–Ω!")
        raise RuntimeError(f"{var_name} –Ω–µ –∑–∞–¥–∞–Ω!")

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# --- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¢–ï–ì–ò –ò –§–†–ê–ó–´ ---
tg_map = {
    '–ö—Ä–∏—Å—Ç–∏–Ω–∞ –ù–µ—Å—Ç–µ—Ä–æ–≤–∞': '@tinatinulya',
    '–ï–≤–≥–µ–Ω–∏—è –ú—É—Ä–∑–∏–Ω–∞': '@xquerel',
    '–ù–∏–ª –ú. –í–ú –ï–í–ì': '@nilfts',
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ë–µ–ª–æ–Ω–æ–≥–æ–≤–∞': '@ek_belonogova',
    '–û–ª–µ–≥ –°. –ê–†–¢ –†–í–ë –°–ü–ë –ì–†–ò–ë': '@olegstate'
}
personalized_phrases = {
    '–ö—Ä–∏—Å—Ç–∏–Ω–∞ –ù–µ—Å—Ç–µ—Ä–æ–≤–∞': [
        '–¥–µ—Ä–∂–∏, —Ç—ã –∂–µ —É –Ω–∞—Å –ª—é–±–∏—à—å –≤—Å—ë –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å üßê.',
        'KPI —Å–∞–º —Å–µ–±—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç. –ü—Ä–∏—Å—Ç—É–ø–∞–π.',
        '—Ç—É—Ç –Ω—É–∂–Ω–∞ —Ç–≤–æ—è —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å.',
        '–≤—Ö–æ–¥—è—â–∏–π —Ç–∞—Å–∫ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é –Ω–µ—Ä–µ—à–∞–µ–º–æ–≥–æ.',
        '—Ç–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —É–º –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å.'
    ],
    '–ï–≤–≥–µ–Ω–∏—è –ú—É—Ä–∑–∏–Ω–∞': [
        '–º–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. ‚ú®',
        '—Ç–µ–±–µ –ø–æ—Ä—É—á–µ–Ω–æ –Ω–µ—Å—Ç–∏ –∑–Ω–∞–º—è –º–∏–ª–æ—Ç—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.',
        '–º–∞–ª–µ–Ω—å–∫–∏–π –≥–∏–≥–∞–Ω—Ç –±–æ–ª—å—à–æ–≥–æ SMM, —Ç–≤–æ–π —á–∞—Å –Ω–∞—Å—Ç–∞–ª.',
        '–ø–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–∞—Å–∫. –£—Ä–æ–≤–µ–Ω—å –º–∏–ª–æ—Ç—ã –≤ —á–∞—Ç–µ –ø–æ–≤—ã—à–µ–Ω.'
    ],
    '–ù–∏–ª –ú. –í–ú –ï–í–ì': [
        '–º–∞—ç—Å—Ç—Ä–æ, –≤–∞—à —Ö–æ–ª—Å—Ç –≥–æ—Ç–æ–≤. –ñ–¥–µ–º —à–µ–¥–µ–≤—Ä. üé®',
        '—Ç—É—Ç –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥. –î—É–º–∞–π!',
        '–∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç —â–µ–ø–æ—Ç–∫–∏ –±–µ–∑—É–º–∏—è. –£ —Ç–µ–±—è –æ–Ω–∞ –µ—Å—Ç—å.',
        '–≤—Ä–µ–º—è –¥–ª—è –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞! –¢—ã —à—Ç—É—Ä–º—É–µ—à—å, –º—ã –∂–¥–µ–º.'
    ],
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ë–µ–ª–æ–Ω–æ–≥–æ–≤–∞': [
        'Figma –ø–ª–∞—á–µ—Ç, –∂–¥–µ—Ç —Å–≤–æ—é –∫–æ—Ä–æ–ª–µ–≤—É. üëë',
        '–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ. –í–ø—Ä–æ—á–µ–º, –∫–∞–∫ –æ–±—ã—á–Ω–æ. üíÖ',
        '–ø—Ä–æ–µ–∫—Ç –∂–¥–µ—Ç —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è. –ò —Å–≤–æ–µ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –≠—Ç–æ —Ç—ã.',
        '—Ç–≤–æ–∏ –º–∞–∫–µ—Ç—ã –∂–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!'
    ],
    '–û–ª–µ–≥ –°. –ê–†–¢ –†–í–ë –°–ü–ë –ì–†–ò–ë': [
        '–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä, –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–π–º–∞—Ç—å –≤–∞–π–±. ü§ô',
        '—Ç—É—Ç –¥–µ–ª—å—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–≤–æ–µ–≥–æ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è. üòé',
        '–Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ –∫–∞–π—Ñ—É. –¢—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫. üå¥'
    ]
}
generic_phrases = [
    '—É –≤–∞—Å —Ç—É—Ç –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∫–∞!',
    '–¥–ª—è —Ç–µ–±—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!',
    '—Ç–µ–±–µ –≤—ã–ø–∞–ª–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.',
    '–≤—Ä–µ–º—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å.'
]
random_endings = [
    '‚òéÔ∏è –ï—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–µ—à—å ‚Äî –ø–æ–∑–≤–æ–Ω—é —Ç–≤–æ–µ–π –º–∞–º–µ! ü§´',
    'P.S. –ú–æ–π –∫–æ—Ç –±—É–¥–µ—Ç —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–≤–∞–ª–∏—à—å –¥–µ–¥–ª–∞–π–Ω. üêà',
    '–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –≤ —Å—Ä–æ–∫ –∑–∞–¥–∞—á—É ‚Äî –ø–µ—á–µ–Ω—å–∫–∞. üç™ –ú–æ–∂–µ—Ç –±—ã—Ç—å.',
    '–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π —Å–∏–ª–∞... –∏ –∫–æ—Ñ–µ–∏–Ω. ‚òï'
]

# --- UTILS ---
def extract_task_id(data: Dict[str, Any]) -> Optional[str]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã—Ç–∞—â–∏—Ç—å task_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
    """
    return data.get("id") or data.get("task_id") or data.get("document_id[2]")

def build_message(type_: str, task: Dict[str, Any]) -> str:
    fio = (task.get("responsible", {}).get("name") or '').strip()
    creator = task.get("creator", {}).get("name", "")
    creator_id = task.get("creator", {}).get("id", "")
    tg_tag = tg_map.get(fio, fio)
    deadline = task.get("deadline")
    if deadline:
        try:
            deadline = datetime.fromisoformat(deadline.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
        except Exception:
            deadline = deadline
    else:
        deadline = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    desc = task.get("description") or '-'
    phrase_list = personalized_phrases.get(fio, generic_phrases)
    random_phrase = random.choice(phrase_list)
    final_ending = f"\n\n{random.choice(random_endings)}"
    opening_line = f"{tg_tag}, {random_phrase}"
    core_message = (
        f"üî¢ ID: {task.get('id')}\n"
        f"üßæ –ó–∞–¥–∞—á–∞: {task.get('title')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
        f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {fio}\n"
        f"üßë‚Äçüíº –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {creator}\n"
        f"üìÅ –ü—Ä–æ–µ–∫—Ç: {task.get('group', {}).get('name', '-')}\n"
        f"üìÖ –°—Ä–æ–∫: {deadline}"
    )
    message = (
        f"{opening_line}\n\n"
        f"{core_message}\n\n"
        f'<a href="https://nebar.bitrix24.ru/company/personal/user/{creator_id}/tasks/task/view/{task.get("id")}/">–°–°–´–õ–ö–ê –ù–ê –ó–ê–î–ê–ß–£</a>'
        f'{final_ending}'
    )
    return message

async def async_get_task_data(task_id: str) -> Optional[Dict[str, Any]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ Bitrix24 API.
    """
    url = f"{BITRIX_WEBHOOK_URL}tasks.task.get?taskId={task_id}"
    try:
        async with httpx.AsyncClient(timeout=7) as client:
            resp = await client.get(url)
            data = resp.json()
            return data.get("result", {}).get("task")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ Bitrix24: {e}")
        return None

async def send_to_telegram(text: str, thread_id: Optional[str] = None):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    """
    send_kwargs = dict(
        chat_id=int(CHAT_ID),
        text=text,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )
    if THREAD_ID or thread_id:
        send_kwargs["message_thread_id"] = int(THREAD_ID or thread_id)
    try:
        await bot.send_message(**send_kwargs)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

# --- FASTAPI –í–ï–ë–•–£–ö ---
@app.post("/bitrix-webhook")
async def bitrix_webhook(request: Request):
    try:
        content_type = request.headers.get("content-type", "")
        if content_type.startswith("application/json"):
            data = await request.json()
        else:
            raw_body = await request.body()
            form = parse_qs(raw_body.decode())
            data = {k: v[0] for k, v in form.items()}
        logger.info(f"BITRIX24 DATA: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞: {e}")
        return {"ok": False, "error": f"Invalid body: {e}"}

    task_id = extract_task_id(data)
    if not task_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ task_id!")
        return {"ok": False, "error": "No task id found!"}

    task = await async_get_task_data(task_id)
    if not task:
        logger.error(f"Task not found: {task_id}")
        return {"ok": False, "error": "Task not found"}

    message = build_message(data.get("type", "new_task"), task)
    await send_to_telegram(message)
    return {"ok": True}

@app.get("/")
async def root():
    return {"ok": True, "status": "–ë–æ—Ç –∂–∏–≤–æ–π"}

# --- AI ASSISTANT & –î–†–£–ì–ò–ï –ö–û–ú–ê–ù–î–´ ---
@dp.message()
async def universal_handler(message: types.Message):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä. –í –ª–∏—á–∫–µ - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
    –í –≥—Ä—É–ø–ø–µ - –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ /help –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç.
    """
    if message.chat.type == "private":
        # GPT-–±–æ—Ç –≤ –ª–∏—á–∫—É
        user_text = message.text.strip() if message.text else ""
        if not user_text:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
            return
        await handle_gpt_message(message, user_text)
    elif message.chat.type in ["supergroup", "group"]:
        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ
        if message.text and message.text.startswith("/help"):
            await message.reply("–Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: –º–æ–≥—É –ø–æ–¥–∫–∏–Ω—É—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Bitrix24 –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ GPT.\n"
                               "–í –ª–∏—á–∫—É - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —á–∞—Ç —Å AI.\n"
                               "–ü–∏—à–∏ /gpt —Ç–µ–∫—Å—Ç - –æ—Ç–≤–µ—á—É!")
        elif message.text and message.text.startswith("/gpt"):
            user_text = message.text.replace("/gpt", "", 1).strip()
            await handle_gpt_message(message, user_text)
        else:
            # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏–º –ø—Ä–æ—á–µ–µ
            pass

async def handle_gpt_message(message: types.Message, user_text: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT.
    """
    if not user_text:
        await message.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /gpt")
        return
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
                {"role": "user", "content": user_text}
            ],
            max_tokens=600,
            temperature=0.9,
        )
        answer = response.choices[0].message.content.strip()
        await message.reply(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")

# --- –°–¢–ê–†–¢ AI–ûGRAM –ü–†–ò –ó–ê–ü–£–°–ö–ï FASTAPI ---
@app.on_event("startup")
async def on_startup():
    logger.info("–°—Ç–∞—Ä—Ç—É–µ–º aiogram polling")
    asyncio.create_task(dp.start_polling(bot))

# --- –ü–†–û–ß–ò–ï –ü–û–õ–ï–ó–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ---
@app.get("/status")
async def status():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    return {"ok": True, "time": datetime.now().isoformat()}

@app.get("/docs-link")
async def docs_link():
    """
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è FastAPI.
    """
    return {"url": "/docs", "info": "Swagger UI"}

# --- –•–ï–õ–ü–ï–†–´ –î–õ–Ø –î–ï–ë–ê–ì–ê ---
@app.get("/debug/env")
async def debug_env():
    """
    –°–º–æ—Ç—Ä–∏, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    return {
        "BOT_TOKEN": BOT_TOKEN[:8] + "..." if BOT_TOKEN else None,
        "CHAT_ID": CHAT_ID,
        "THREAD_ID": THREAD_ID,
        "BITRIX_WEBHOOK_URL": BITRIX_WEBHOOK_URL[:25] + "...",
        "OWNER_ID": OWNER_ID
    }

# --- –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ö–ê–ö –°–ö–†–ò–ü–¢ ---
# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(app, host="0.0.0.0", port=8000)
